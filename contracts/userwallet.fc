#include "imports/stdlib.fc";

const int ton_for_fee = 100000000;

(int, int, int, int, int, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return 
    (ds~load_uint(64), 
    ds~load_coins(), 
    ds~load_uint(16), 
    ds~load_uint(16), 
    ds~load_uint(1), 
    ds~load_msg_addr(), ;; admin_address
    ds~load_msg_addr(), ;; nft_address
    ds~load_dict());
}

() save_data(int seed, int total, int length, int last_key, int initiated, slice admin, slice nft_address, cell messages) impure inline {
    set_data(begin_cell()
        .store_uint(seed, 64)
        .store_coins(total)
        .store_uint(length, 16)
        .store_uint(last_key, 16)
        .store_uint(initiated, 1)
        .store_slice(admin)
        .store_slice(nft_address)
        .store_dict(messages)
    .end_cell());
}

() send_transfer(slice nft_address, int nft_fee) impure inline {
    send_raw_message(begin_cell()
        .store_uint(0x10, 6)
        .store_slice(nft_address)
        .store_coins(nft_fee)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .end_cell(), 1);
}

() send_excesses(slice dest) impure inline {
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_slice("Excesses")
    .end_cell(), 128);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender = cs~load_msg_addr();
    var (int seed, int total, int length, int last_key, int initiated, slice admin, slice nft_address, cell messages) = load_data();

    var is_initialized = admin.slice_bits() > 2;

    if (initiated == 0) {
        throw_if(101, total > msg_value - ton_for_fee * (length + (length + 253) / 254));
        initiated = 1;
    } else {
        throw_unless(100, equal_slices(sender, my_address(), nft_address()) | equal_slices(sender, admin, nft_address));
        accept_message();
    }

    (last_key, slice val, int f?) = messages.udict_get_next?(16, last_key);

    repeat (min(254, length)) {
        if (f?) {
            int nft_fee = val~load_coins();
            slice nft_address = val~load_msg_addr();
            send_transfer(nft_address, nft_fee);
            (last_key, val, f?) = messages.udict_get_next?(16, last_key);
        }
    }
    
    if (~ f?) {
        save_data(seed, total, 0, 0, initiated, admin, nft_address, messages);
        send_excesses(admin);
    } else {
        save_data(seed, total, length - 254, last_key - 1, initiated, admin, nft_address, messages);
        send_transfer(my_address(), ton_for_fee);
    }
}

(int) has_finished () method_id {
    (int seed, int total, int length, int last_key, int initiated, slice admin, slice nft_address, cell messages) = load_data();
    return (length == 0);
}
